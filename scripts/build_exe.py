#!/usr/bin/env python3
"""
Script para criar execut√°vel do AurantisSync
Usa PyInstaller para gerar um .exe standalone
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def main():
    print("üî® Criando execut√°vel do AurantisSync...")
    
    # Verificar se PyInstaller est√° instalado
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller {PyInstaller.__version__} encontrado")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado. Instalando...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller instalado")
    
    # Arquivo principal
    main_file = "aurantis_sync_mvp.py"
    if not os.path.exists(main_file):
        print(f"‚ùå Arquivo {main_file} n√£o encontrado!")
        return False
    
    # Limpar builds anteriores
    if os.path.exists("build"):
        print("üßπ Limpando build anterior...")
        shutil.rmtree("build")
    
    if os.path.exists("dist"):
        print("üßπ Limpando dist anterior...")
        shutil.rmtree("dist")
    
    # Comando PyInstaller
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--noconsole",           # Sem janela de console
        "--onefile",             # Arquivo √∫nico
        "--name", "AurantisSync", # Nome do execut√°vel
        "--clean",               # Limpar cache
        main_file
    ]
    
    print("üöÄ Executando PyInstaller...")
    print(f"Comando: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build conclu√≠do com sucesso!")
        
        # Verificar se o execut√°vel foi criado
        exe_path = Path("dist") / "AurantisSync.exe"
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üì¶ Execut√°vel criado: {exe_path}")
            print(f"üìè Tamanho: {size_mb:.1f} MB")
            print(f"üìç Localiza√ß√£o: {exe_path.absolute()}")
            
            # Criar pasta de distribui√ß√£o
            dist_folder = Path("AurantisSync_Portable")
            if dist_folder.exists():
                shutil.rmtree(dist_folder)
            
            dist_folder.mkdir()
            shutil.copy2(exe_path, dist_folder / "AurantisSync.exe")
            
            # Copiar arquivos necess√°rios
            if os.path.exists("requirements.txt"):
                shutil.copy2("requirements.txt", dist_folder / "requirements.txt")
            
            if os.path.exists("README.md"):
                shutil.copy2("README.md", dist_folder / "README.md")
            
            print(f"üìÅ Pasta port√°vel criada: {dist_folder.absolute()}")
            print("\nüéâ Execut√°vel pronto para distribui√ß√£o!")
            print(f"Execute: {dist_folder / 'AurantisSync.exe'}")
            
        else:
            print("‚ùå Execut√°vel n√£o foi criado!")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro no build: {e}")
        print(f"Stderr: {e.stderr}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚úÖ Build conclu√≠do com sucesso!")
    else:
        print("\n‚ùå Build falhou!")
        sys.exit(1)
